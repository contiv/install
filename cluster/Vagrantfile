# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'rubygems'
require 'fileutils'
require 'yaml'

DEFAULT_K8S_VERSION = 'v1.4.7'.freeze
UBUNTU = 'ubuntu'.freeze
CENTOS = 'centos'.freeze
RHEL = 'rhel7'.freeze

token = 'd900e1.8a392798f13b33a4'
node_os = ENV['CONTIV_NODE_OS'] || CENTOS

# method to create an etc_hosts file based on the cluster info
def create_etc_hosts(num_nodes, base_ip, start)
  master_ip = base_ip + start.to_s
  hosts = "127.0.0.1   localhost\n"
  hosts << "#{master_ip}   netmaster\n"
  hosts = (0..num_nodes).inject(hosts) { |acc, elem| acc << base_ip + "#{elem + start} contiv-node#{elem + 1} \n" }

  etc_file = (ENV['VAGRANT_CWD'] || '.') + '/.etc_hosts'
  File.write(etc_file, hosts)
  master_ip
end

# method to create an cfg file based on the cluster info
def create_cfg_info(num_nodes, node_ips)
  node_os = ENV['CONTIV_NODE_OS'] || CENTOS
  conn = {}
  num_nodes.times do |n|
    node_ip = node_ips[n]
    node = if n.zero?
             { 'role' => 'master' }
           else
             {}
           end
    def_ctrl_if = node_os == UBUNTU ? 'enp0s8' : 'eth1'
    def_data_if = node_os == UBUNTU ? 'enp0s9' : 'eth2'
    node['control'] = ENV['CONTIV_CONTROL_IF'] || def_ctrl_if
    node['data'] = ENV['CONTIV_DATA_IF'] || def_data_if
    conn[node_ip] = node
  end
  cfg_data = { 'CONNECTION_INFO' => conn }
  cfg_file = (ENV['VAGRANT_CWD'] || '.') + '/.cfg.yml'
  File.write(cfg_file, cfg_data.to_yaml)
end

provision_node = <<SCRIPT
echo "export https_proxy='$2'" >> /etc/profile.d/envvar.sh
echo "export http_proxy='$1'" >> ~/.profile
echo "export https_proxy='$2'" >> ~/.profile
source /etc/profile.d/envvar.sh
SCRIPT

provision_net = <<SCRIPT
sudo yum install -y net-tools
cat <<EOF > /etc/hosts
$1
EOF
ifup eth1
SCRIPT

provision_etc_hosts = <<SCRIPT
cat <<EOF > /etc/hosts
$1
EOF
SCRIPT

provision_key = <<SCRIPT
sudo apt-get install python -y
mkdir -p /home/ubuntu/.ssh/
cat <<EOF >> /home/ubuntu/.ssh/authorized_keys
$1
EOF
SCRIPT

# begin execution here
num_nodes = ENV['CONTIV_NODES'] ? ENV['CONTIV_NODES'].to_i : 2
base_ip = ENV['CONTIV_IP_PREFIX'] || '192.168.2.'
start = ENV['CONTIV_KUBEADM'] ? 50 : 50 + num_nodes
name_start = ENV['CONTIV_KUBEADM'] ? 1 : 1 + num_nodes
node_ips = Array.new(num_nodes) { |n| base_ip + (n + start).to_s }
node_names = Array.new(num_nodes) { |n| "contiv-node#{n + name_start}" }

master_ip = create_etc_hosts(num_nodes, base_ip, start)
create_cfg_info(num_nodes, node_ips)

VAGRANTFILE_API_VERSION = '2'.freeze
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box_check_update = false
  config.vbguest.auto_update = false if Vagrant.has_plugin?('vagrant-vbguest')
  if node_os == RHEL
    config.registration.manager = 'subscription_manager'
    config.registration.username = ENV['CONTIV_RHEL_USER']
    config.registration.password = ENV['CONTIV_RHEL_PASSWD']
  end

  num_nodes.times do |n|
    node_name = node_names[n]
    node_addr = node_ips[n]

    config.vm.provider 'virtualbox' do |v|
      v.linked_clone = true if Vagrant::VERSION >= '1.8'
    end

    config.vm.define vm_name = node_name do |c|
      if node_os == RHEL
        # Download rhel7.2 box from https://access.redhat.com/downloads/content/293/ver=2/rhel---7/2.0.0/x86_64/product-software
        # Add it as rhel7 vagrant box add rhel-cdk-kubernetes-7.2-29.x86_64.vagrant-virtualbox.box --name=rhel7
        # run this command once you done with adding vagrant box : vagrant plugin install vagrant-registration
        # You need to export following variable, in order to run on RHEL7
        # export CONTIV_RHEL_USER=<your developer account username of redhat site>
        # export CONTIV_RHEL_PASSWD=<your developer account password of redhat site>
        # export CONTIV_NODE_OS=rhel7
        c.vm.box = 'rhel7'
        config.ssh.insert_key = false
      elsif node_os == UBUNTU
        c.vm.box = 'ubuntu/xenial64'
      else
        c.vm.box = 'centos/7'
        config.ssh.insert_key = false
      end
      c.vm.provision 'shell' do |s|
        s.inline = provision_node
        s.args = [ENV['http_proxy'] || '', ENV['https_proxy'] || '']
      end
      c.vm.provision 'shell' do |s|
        s.inline = node_os == UBUNTU ? provision_etc_hosts : provision_net
        etc_file = (ENV['VAGRANT_CWD'] || '.') + '/.etc_hosts'
        hosts = File.read(etc_file)
        s.args = [hosts]
      end

      # configure ip address etc
      c.vm.hostname = vm_name
      c.vm.network :private_network, ip: node_addr
      c.vm.network :private_network, ip: node_addr, virtualbox__intnet: 'true', auto_config: false
      if n.zero?
        c.vm.network 'forwarded_port', guest: 10_000, host: 10_005 + node_addr.split('.')[3].to_i
      end
      c.vm.provider 'virtualbox' do |v|
        v.memory = ENV['CONTIV_KUBEADM'] && n.zero? ? 2048 : 1024
        # make all nics 'virtio' to take benefit of builtin vlan tag
        # support, which otherwise needs to be enabled in Intel drivers,
        # which are used by default by virtualbox
        v.customize ['modifyvm', :id, '--nictype1', 'virtio']
        v.customize ['modifyvm', :id, '--nictype2', 'virtio']
        v.customize ['modifyvm', :id, '--nictype3', 'virtio']
        v.customize ['modifyvm', :id, '--nicpromisc2', 'allow-all']
        v.customize ['modifyvm', :id, '--nicpromisc3', 'allow-all']
        v.customize ['modifyvm', :id, '--paravirtprovider', 'kvm']
      end # v

      if node_os == UBUNTU
        c.vm.provision 'shell' do |s|
          s.inline = provision_key
          key = File.read(ENV['CONTIV_SSH_CERT'] || ENV['HOME'] + '/.ssh/id_rsa.pub')
          s.args = [key]
        end
      end
      if ENV['CONTIV_KUBEADM']
        k8s_ver = ENV['CONTIV_K8S_VERSION'] || DEFAULT_K8S_VERSION
        k8s_path = k8s_ver.include?('1.5.') || k8s_ver.include?('1.4.') ? 'k8s1.4/' : 'k8s1.6/'
        if node_os == RHEL
          c.vm.provision 'shell', inline: <<-EOS
            yum remove -y kubernetes-node-*
            yum remove -y kubernetes-client-*
            EOS
        end
        if node_os == UBUNTU
          c.vm.provision :shell, path: k8s_path + 'bootstrap_ubuntu.sh'
        else
          c.vm.provision :shell, path: k8s_path + 'bootstrap_centos.sh'
          c.vm.provision 'shell', inline: 'sudo setenforce 0'
        end
        if n.zero?
          # Install kubernetes on master
          c.vm.provision :shell, path: k8s_path + 'k8smaster.sh', args: [token, node_addr, k8s_ver]
        else
          # Install kubernetes on nodes
          c.vm.provision :shell, path: k8s_path + 'k8sworker.sh', args: [token, master_ip]
        end # if
      elsif node_os != UBUNTU
        c.vm.provision :shell, inline: 'yum install policycoreutils-python -y'
      end
    end # c
  end # role
end # config
